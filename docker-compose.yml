
services:
  app:
    build:
      context: ./
      dockerfile: Dockerfile
    image: test/app:v1
    container_name: app
    ports:
      - "3000:3000"
    restart: on-failure
    environment:
      - POSTGRES_HOST=app_db
    depends_on:
      app_db:
        condition: service_healthy
      app_redis:
        condition: service_healthy
#      app_mongodb:
#        condition: service_healthy

  app_db:
    image: postgres:latest
    container_name: app_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=tinder
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d tinder -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app_redis:
    image: redis:latest
    container_name: app_redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=1234
      - REDIS_PORT=6379
      - REDIS_DATABASES=16
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
#
#  app_mongodb:
#    image: mongo:latest
#    container_name: app_mongodb
#    ports:
#      - "27017:27017"
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=root
#      - MONGO_INITDB_ROOT_PASSWORD=123456
#    volumes:
#      - mongodb_data:/data/db
#      - ./deploy/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
#    restart: always
#    healthcheck:
#      test: echo 'db.runCommand({find:"moneyforward.admin"}).ok' | mongosh --authenticationDatabase admin --host localhost -u root -p 123456 admin --quiet | grep -q 1
#      interval: 30s
#      timeout: 10s
#      retries: 5

volumes:
  postgres_data:

#  mongodb_data:
#    driver: local
#    driver_opts:
#      type: none
#      device: /Users/hackartz/docker-vol/moneyforward-mongo-db
#      o: bind
